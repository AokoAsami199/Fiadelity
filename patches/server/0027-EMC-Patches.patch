From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Etil <81570777+etil2jz@users.noreply.github.com>
Date: Fri, 12 Nov 2021 19:45:40 +0100
Subject: [PATCH] EMC Patches

Original patches by starlis, licensed under MIT.
You can find the original patches on https://github.com/starlis/empirecraft

diff --git a/src/main/java/net/minecraft/server/commands/GiveCommand.java b/src/main/java/net/minecraft/server/commands/GiveCommand.java
index a0dc380e90415de9068ea408d62a1605c82631df..b4d42c9e270fa1fedf76eeda4d3c4a5896fd642e 100644
--- a/src/main/java/net/minecraft/server/commands/GiveCommand.java
+++ b/src/main/java/net/minecraft/server/commands/GiveCommand.java
@@ -45,6 +45,7 @@ public class GiveCommand {
                     k -= l;
                     ItemStack itemStack = item.createItemStack(l, false);
                     boolean bl = serverPlayer.getInventory().add(itemStack);
+					if (true) { continue; } // EMC - never drop items
                     if (bl && itemStack.isEmpty()) {
                         itemStack.setCount(1);
                         ItemEntity itemEntity2 = serverPlayer.drop(itemStack, false, false, true); // Paper - Fix duplicating /give items on item drop cancel
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 621ec8e8a197323da6b423fee57c816ac9d7c875..3d43e4fc34627d8d523d53eda8e77f2df40d46fc 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2061,6 +2061,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     private void handleChat(TextFilter.FilteredText message) {
         if (this.player.isRemoved() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) { // CraftBukkit - dead men tell no tales
             this.send(new ClientboundChatPacket((new TranslatableComponent("chat.disabled.options")).withStyle(ChatFormatting.RED), ChatType.SYSTEM, Util.NIL_UUID));
+		} else if (!player.didPlayerJoinEvent) { return; // EMC - do not handle chat messages before they joined
         } else {
             this.player.resetLastActionTime();
             String s = message.getRaw();
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
index 3ac0d0419cbdacabf647a530a82ddf67ddaa13b7..015cd035d659c9e9de4675bba43ac39bd3b0754f 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -355,4 +355,11 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
     public boolean isAttackable() {
         return false;
     }
+	
+	// EMC start
+	@Override
+	public boolean shouldBeSaved() {
+		return false;
+	}
+	// EMC end
 }
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 7695a5ec88023720d873f81fc36f78ad60fb9589..8eb8c14965b08a275e4a94ab67f3111ada11d101 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -174,9 +174,9 @@ public final class ItemStack {
         if (display != null) {
             if (display.contains("Name", 8)) {
                 String json = display.getString("Name");
-                if (json != null && json.contains("\u00A7")) {
+                if (true || json != null && json.contains("\u00A7")) {
                     try {
-                        display.put("Name", convert(json));
+                        display.put("Name", convert(json)); // EMC
                     } catch (JsonParseException jsonparseexception) {
                         display.remove("Name");
                     }
@@ -186,7 +186,7 @@ public final class ItemStack {
                 ListTag list = display.getList("Lore", 8);
                 for (int index = 0; index < list.size(); index++) {
                     String json = list.getString(index);
-                    if (json != null && json.contains("\u00A7")) { // Only try if it has legacy in the unparsed json
+                    if (true || json != null && json.contains("\u00A7")) { // Only try if it has legacy in the unparsed json // EMC
                         try {
                             list.set(index, convert(json));
                         } catch (JsonParseException e) {
@@ -203,7 +203,10 @@ public final class ItemStack {
         if (component instanceof TextComponent && component.getContents().contains("\u00A7") && component.getSiblings().isEmpty()) {
             // Only convert if the root component is a single comp with legacy in it, don't convert already normal components
             component = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(component.getContents())[0];
-        }
+        } else {
+			// pass this to legacy format and back to strip invisible components and ensure consistent modifier format
+			component = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(component))[0];
+		}
         return net.minecraft.nbt.StringTag.valueOf(org.bukkit.craftbukkit.util.CraftChatMessage.toJSON(component));
     }
     // Paper end
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
index 33660209885a9d56b127ca3926b6c7c60469127e..9906ae34f8618bf56d98279ed0d9945872dd860b 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
@@ -46,7 +46,7 @@ public class MerchantOffer {
         this.result = ItemStack.of(nbt.getCompound("sell"));
         this.uses = nbt.getInt("uses");
         if (nbt.contains("maxUses", 99)) {
-            this.maxUses = nbt.getInt("maxUses");
+            this.maxUses = Math.min(16, nbt.getInt("maxUses")); // EMC
         } else {
             this.maxUses = 4;
         }
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 132140e00865fcf84ebe03ffcbc2f30ac11a0b35..3e92f11619e3f9687287d2e4cb44c4519ead6107 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -157,60 +157,62 @@ public class Explosion {
         int i;
         int j;
 
-        for (int k = 0; k < 16; ++k) {
-            for (i = 0; i < 16; ++i) {
-                for (j = 0; j < 16; ++j) {
-                    if (k == 0 || k == 15 || i == 0 || i == 15 || j == 0 || j == 15) {
-                        double d0 = (double) ((float) k / 15.0F * 2.0F - 1.0F);
-                        double d1 = (double) ((float) i / 15.0F * 2.0F - 1.0F);
-                        double d2 = (double) ((float) j / 15.0F * 2.0F - 1.0F);
-                        double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
-
-                        d0 /= d3;
-                        d1 /= d3;
-                        d2 /= d3;
-                        float f = this.radius * (0.7F + this.level.random.nextFloat() * 0.6F);
-                        double d4 = this.x;
-                        double d5 = this.y;
-                        double d6 = this.z;
-
-                        for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
-                            BlockPos blockposition = new BlockPos(d4, d5, d6);
-                            BlockState iblockdata = this.level.getBlockState(blockposition);
-                            if (!iblockdata.isDestroyable()) continue; // Paper
-                            FluidState fluid = iblockdata.getFluidState(); // Paper
-
-                            if (!this.level.isInWorldBounds(blockposition)) {
-                                break;
-                            }
-
-                            Optional<Float> optional = this.damageCalculator.getBlockExplosionResistance(this, this.level, blockposition, iblockdata, fluid);
-
-                            if (optional.isPresent()) {
-                                f -= ((Float) optional.get() + 0.3F) * 0.3F;
-                            }
-
-                            if (f > 0.0F && this.damageCalculator.shouldBlockExplode(this, this.level, blockposition, iblockdata, f)) {
-                                set.add(blockposition);
-                                // Paper start - prevent headless pistons from forming
-                                if (!com.destroystokyo.paper.PaperConfig.allowHeadlessPistons && iblockdata.getBlock() == Blocks.MOVING_PISTON) {
-                                    BlockEntity extension = this.level.getBlockEntity(blockposition);
-                                    if (extension instanceof PistonMovingBlockEntity && ((PistonMovingBlockEntity) extension).isSourcePiston()) {
-                                       Direction direction = iblockdata.getValue(PistonHeadBlock.FACING);
-                                       set.add(blockposition.relative(direction.getOpposite()));
-                                    }
-                                }
-                                // Paper end
-                            }
-
-                            d4 += d0 * 0.30000001192092896D;
-                            d5 += d1 * 0.30000001192092896D;
-                            d6 += d2 * 0.30000001192092896D;
-                        }
-                    }
-                }
-            }
-        }
+        if (this.fire || this.blockInteraction != BlockInteraction.NONE) { // EMC - don't run block processing if neither flag is set
+			for (int k = 0; k < 16; ++k) {
+				for (i = 0; i < 16; ++i) {
+					for (j = 0; j < 16; ++j) {
+						if (k == 0 || k == 15 || i == 0 || i == 15 || j == 0 || j == 15) {
+							double d0 = (double) ((float) k / 15.0F * 2.0F - 1.0F);
+							double d1 = (double) ((float) i / 15.0F * 2.0F - 1.0F);
+							double d2 = (double) ((float) j / 15.0F * 2.0F - 1.0F);
+							double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+
+							d0 /= d3;
+							d1 /= d3;
+							d2 /= d3;
+							float f = this.radius * (0.7F + this.level.random.nextFloat() * 0.6F);
+							double d4 = this.x;
+							double d5 = this.y;
+							double d6 = this.z;
+
+							for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
+								BlockPos blockposition = new BlockPos(d4, d5, d6);
+								BlockState iblockdata = this.level.getBlockState(blockposition);
+								if (!iblockdata.isDestroyable()) continue; // Paper
+								FluidState fluid = iblockdata.getFluidState(); // Paper
+
+								if (!this.level.isInWorldBounds(blockposition)) {
+									break;
+								}
+
+								Optional<Float> optional = this.damageCalculator.getBlockExplosionResistance(this, this.level, blockposition, iblockdata, fluid);
+
+								if (optional.isPresent()) {
+									f -= ((Float) optional.get() + 0.3F) * 0.3F;
+								}
+
+								if (f > 0.0F && this.damageCalculator.shouldBlockExplode(this, this.level, blockposition, iblockdata, f)) {
+									set.add(blockposition);
+									// Paper start - prevent headless pistons from forming
+									if (!com.destroystokyo.paper.PaperConfig.allowHeadlessPistons && iblockdata.getBlock() == Blocks.MOVING_PISTON) {
+										BlockEntity extension = this.level.getBlockEntity(blockposition);
+										if (extension instanceof PistonMovingBlockEntity && ((PistonMovingBlockEntity) extension).isSourcePiston()) {
+											Direction direction = iblockdata.getValue(PistonHeadBlock.FACING);
+											set.add(blockposition.relative(direction.getOpposite()));
+										}
+									}
+									// Paper end
+								}
+
+								d4 += d0 * 0.30000001192092896D;
+								d5 += d1 * 0.30000001192092896D;
+								d6 += d2 * 0.30000001192092896D;
+							}
+						}
+					}
+				}
+			}
+		} // EMC - don't run block processing if neither flag is set
 
         this.toBlow.addAll(set);
         float f2 = this.radius * 2.0F;
@@ -221,7 +223,7 @@ public class Explosion {
         int i1 = Mth.floor(this.y + (double) f2 + 1.0D);
         int j1 = Mth.floor(this.z - (double) f2 - 1.0D);
         int k1 = Mth.floor(this.z + (double) f2 + 1.0D);
-        List<Entity> list = this.level.getEntities(this.source, new AABB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1), (com.google.common.base.Predicate<Entity>) entity -> entity.isAlive() && !entity.isSpectator()); // Paper - Fix lag from explosions processing dead entities
+        List<Entity> list = this.level.getEntities(this.source, new AABB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1), (com.google.common.base.Predicate<Entity>) entity -> entity.isAlive() && !entity.isSpectator() && !(entity instanceof ItemEntity)); // Paper - Fix lag from explosions processing dead entitiess // EMC - exclue item entities
         Vec3 vec3d = new Vec3(this.x, this.y, this.z);
 
         for (int l1 = 0; l1 < list.size(); ++l1) {
@@ -282,7 +284,7 @@ public class Explosion {
         boolean flag1 = this.blockInteraction != Explosion.BlockInteraction.NONE;
 
         if (particles) {
-            if (this.radius >= 2.0F && flag1) {
+            if (this.radius >= 2.0F /*&& flag1*/) { // EMC - don't care about block breaks flag for animation
                 this.level.addParticle(ParticleTypes.EXPLOSION_EMITTER, this.x, this.y, this.z, 1.0D, 0.0D, 0.0D);
             } else {
                 this.level.addParticle(ParticleTypes.EXPLOSION, this.x, this.y, this.z, 1.0D, 0.0D, 0.0D);
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index c10e2864170b2d95cdce89f94c076c5aad57e451..6372ca0e8e322cbea576c1ab7604b8b204735ff1 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -905,7 +905,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public void neighborChanged(BlockPos pos, Block sourceBlock, BlockPos neighborPos) {
         if (!this.isClientSide) {
-            BlockState iblockdata = this.getBlockState(pos);
+            BlockState iblockdata = this.getTypeIfLoaded(pos); // EMC
+			if (iblockdata == null) return; // EMC
 
             try {
                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
index ac564148956beb984650341c5c0994573f4f7225..a192495cf8c97ec4ec7c224b7b0d654f7d447bd0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -69,6 +69,7 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
     }
 
     public void unpackLootTable(@Nullable Player player) {
+		if (player == null) return; // EMC
         if (this.lootableData.shouldReplenish(player) && this.level.getServer() != null) { // Paper
             LootTable lootTable = this.level.getServer().getLootTables().get(this.lootTable);
             if (player instanceof ServerPlayer) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index 83d813025efca5846538e36508a5d4fe38b02108..e14ad16a506a253ed19724580de6dafe26820648 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -889,7 +889,8 @@ public abstract class BlockBehaviour {
                 Direction enumdirection = aenumdirection[l];
 
                 blockposition_mutableblockposition.setWithOffset((Vec3i) pos, enumdirection);
-                BlockState iblockdata = world.getBlockState(blockposition_mutableblockposition);
+                BlockState iblockdata = world.getTypeIfLoaded(blockposition_mutableblockposition); // EMC
+				if (iblockdata == null) { continue; } // EMC
                 BlockState iblockdata1 = iblockdata.updateShape(enumdirection.getOpposite(), this.asState(), world, blockposition_mutableblockposition, pos);
 
                 Block.updateOrDestroy(iblockdata, iblockdata1, world, blockposition_mutableblockposition, flags, maxUpdateDepth);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 858e29ad77aee8a1b7797c2d82902abbfd662da2..3f05af43f6bfa343927ba89badf73f242b29c0f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -371,7 +371,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean unloadChunk(int x, int z) {
-        return this.unloadChunk(x, z, true);
+        return this.unloadChunkRequest(x, z); // EMC
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index c88ab49f60857d5687facc8523f9edc4d652c81b..748c6d0613ca2b78c0f589d26b823d0a8316b893 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -687,7 +687,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     @Overridden
     void applyToItem(CompoundTag itemTag) {
         if (this.hasDisplayName()) {
-            this.setDisplayTag(itemTag, NAME.NBT, StringTag.valueOf(displayName));
+            this.setDisplayTag(itemTag, NAME.NBT, StringTag.valueOf(CraftChatMessage.reencode(displayName))); // EMC
         }
         if (this.hasLocalizedName()) {
             this.setDisplayTag(itemTag, LOCNAME.NBT, StringTag.valueOf(locName));
@@ -779,7 +779,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         ListTag tagList = new ListTag();
         for (String value : list) {
             // SPIGOT-5342 - horrible hack as 0 version does not go through the Mojang updater
-            tagList.add(StringTag.valueOf(this.version <= 0 || this.version >= 1803 ? value : CraftChatMessage.fromJSONComponent(value))); // SPIGOT-4935
+            tagList.add(StringTag.valueOf(this.version <= 0 || this.version >= 1803 ? CraftChatMessage.reencode(value) : CraftChatMessage.fromJSONComponent(value))); // SPIGOT-4935 // EMC
         }
 
         return tagList;
@@ -882,7 +882,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     // Paper end
     @Override
     public final void setDisplayName(String name) {
-        this.displayName = CraftChatMessage.fromStringOrNullToJSON(name);
+        this.displayName = CraftChatMessage.fromStringOrNullToJSON(CraftChatMessage.reencode(name)); // EMC
     }
 
     // Paper start
@@ -1547,7 +1547,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
                 if (possiblyJsonInput) {
                     addTo.add(CraftChatMessage.fromJSONOrStringToJSON(entry));
                 } else {
-                    addTo.add(CraftChatMessage.fromStringToJSON(entry));
+                    addTo.add(CraftChatMessage.fromStringToJSON(CraftChatMessage.reencode(entry)));
                 }
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index 26d43c229caf9f8504af7071c3a61ec6da7e27ec..3b67895fa530c3a6f0c1d616025a347cfa1a3645 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -40,6 +40,12 @@ public final class CraftChatMessage {
     public static ChatColor getColor(ChatFormatting format) {
         return ChatColor.getByChar(format.code);
     }
+	
+	// EMC start
+	public static String reencode(String string) {
+		return CraftChatMessage.fromComponent(CraftChatMessage.fromString(string)[0]);
+	}
+	// EMC end
 
     private static final class StringMessage {
         private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + "[0-9a-fk-orx])|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))|(\\n)", Pattern.CASE_INSENSITIVE);

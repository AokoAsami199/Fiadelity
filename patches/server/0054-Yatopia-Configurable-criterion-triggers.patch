From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Date: Sat, 24 Oct 2020 21:08:17 -0500
Subject: [PATCH] (Yatopia) Configurable criterion triggers

This patch adds toggles for three criterion triggers that are called every tick. These can be very unnecessary, and especially in the case of CriterionTriggerEnterBlock, quite heavy.

Original code by YatopiaMC, licensed under MIT
You can find the original code on https://github.com/YatopiaMC/Yatopia

diff --git a/src/main/java/me/kurumifake/FiadelityConfig.java b/src/main/java/me/kurumifake/FiadelityConfig.java
index 25028e6add80c4732b4b6f0cdf48ab4946ef1f89..17314f5c14b5e93efc8f44387cb990293fb39aa5 100644
--- a/src/main/java/me/kurumifake/FiadelityConfig.java
+++ b/src/main/java/me/kurumifake/FiadelityConfig.java
@@ -114,4 +114,14 @@ public class FiadelityConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean criterionTriggerEnterBlock = true;
+    public static boolean criterionTriggerTick = true;
+    public static boolean criterionTriggerLocation = true;
+    private static void criterionTriggers() {
+        criterionTriggerEnterBlock = getBoolean("criterion-trigger.enter-block", criterionTriggerEnterBlock);
+        criterionTriggerTick = getBoolean("criterion-trigger.tick", criterionTriggerTick);
+        criterionTriggerLocation = getBoolean("criterion-trigger.location", criterionTriggerLocation);
+    }
+
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 5635b7fbfbc27e2042eaf4af1fe139bde514e7ab..4b383c5618a211a7d65eccb8f9b9d8be363c5530 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -611,6 +611,7 @@ public class ServerPlayer extends Player {
 
     @Override
     protected void onInsideBlock(BlockState state) {
+        if (me.kurumifake.FiadelityConfig.criterionTriggerEnterBlock) // Fiadelity
         CriteriaTriggers.ENTER_BLOCK.trigger(this, state);
     }
 
@@ -657,7 +658,7 @@ public class ServerPlayer extends Player {
             }
         }
 
-        CriteriaTriggers.TICK.trigger(this);
+        if (me.kurumifake.FiadelityConfig.criterionTriggerTick) { CriteriaTriggers.TICK.trigger(this); } // Fiadelity
         if (this.levitationStartPos != null) {
             CriteriaTriggers.LEVITATION.trigger(this, this.levitationStartPos, this.tickCount - this.levitationStartTime);
         }
@@ -732,7 +733,7 @@ public class ServerPlayer extends Player {
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
 
-            if (this.tickCount % 20 == 0) {
+            if (me.kurumifake.FiadelityConfig.criterionTriggerLocation && this.tickCount % 20 == 0) { // Fiadelity
                 CriteriaTriggers.LOCATION.trigger(this);
             }
 

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <Blake.Galbreath@GMail.com>
Date: Fri, 28 May 2021 12:24:45 -0500
Subject: [PATCH] (Purpur) Fix advancement triggers on entity death

Original code by PurpurMC, licensed under MIT.
You can find the original code on https://github.com/PurpurMC/Purpur

This fixes PaperMC/Paper#3729 and PaperMC/Paper#4252

Paper changes logical order revolving around making the EntityDeathEvent
cancellable. Reordering this logic has ended up with entity equipment being
cleared _before_ advancement criteria can run, causing things like killing
raid captains not giving the voluntary exile advancement.

This fixes the issue by storing a copy of the equipment in a new field just
before doing the death event logic where the equipment is cleared and then
restoring it back to the entity just before the criterion triggers run and
then finally clearing the equipment again right after the criterion is done.

diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 177fd99a5950c9d736b50b6ef8ade825aa6b7666..1e7b11135e3155686cf48e2e7356f67c18a30079 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1633,10 +1633,13 @@ public abstract class LivingEntity extends Entity {
                 }
 
                 // Paper start
+                List<List<ItemStack>> equipmentSnapshotBefore = this.cloneEquipment(); // Purpur
                 org.bukkit.event.entity.EntityDeathEvent deathEvent = this.dropAllDeathLoot(source);
                 if (deathEvent == null || !deathEvent.isCancelled()) {
                     if (this.deathScore >= 0 && entityliving != null) {
+                        this.restoreEquipment(equipmentSnapshotBefore); // Purpur
                         entityliving.awardKillScore(this, this.deathScore, source);
+                        this.clearEquipment(); // Purpur
                     }
 
                     if (this.isSleeping()) {
@@ -2504,6 +2507,12 @@ public abstract class LivingEntity extends Entity {
     @Override
     public abstract void setItemSlot(EquipmentSlot slot, ItemStack stack);
 
+    // Purpur start
+    public abstract List<List<ItemStack>> cloneEquipment();
+    public abstract void restoreEquipment(List<List<ItemStack>> list);
+    public abstract void clearEquipment();
+    // Purpur end
+
     protected void verifyEquippedItem(ItemStack stack) {
         CompoundTag nbttagcompound = stack.getTag();
 
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index b247d9dc2b2f5b4a6e87ca35e2a08f9be4e7a7b4..0f86978032f6b1b92d87bbea1594ea461b59b685 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -989,6 +989,41 @@ public abstract class Mob extends LivingEntity {
 
     }
 
+    // Purpur start
+    public List<List<ItemStack>> cloneEquipment() {
+        List<List<ItemStack>> list = new java.util.ArrayList<>();
+        List<ItemStack> handItems = new java.util.ArrayList<>();
+        for (ItemStack item : this.handItems) {
+            handItems.add(item.copy());
+        }
+        list.add(handItems);
+        List<ItemStack> armorItems = new java.util.ArrayList<>();
+        for (ItemStack item : this.armorItems) {
+            armorItems.add(item.copy());
+        }
+        list.add(armorItems);
+        return list;
+    }
+
+    public void restoreEquipment(List<List<ItemStack>> list) {
+        this.handItems.clear();
+        List<ItemStack> handItems = list.get(0);
+        for (int i = 0; i < handItems.size(); i++) {
+            this.handItems.set(i, handItems.get(1));
+        }
+        this.armorItems.clear();
+        List<ItemStack> armorItems = list.get(1);
+        for (int i = 0; i < armorItems.size(); i++) {
+            this.armorItems.set(i, armorItems.get(i));
+        }
+    }
+
+    public void clearEquipment() {
+        this.handItems.clear();
+        this.armorItems.clear();
+    }
+    // Purpur end
+
     @Override
     protected void dropCustomDeathLoot(DamageSource source, int lootingMultiplier, boolean allowDrops) {
         super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index 02bce120fc93caa9e1e92b61e74c28209a1b2385..8eb22e8e3f4a77f19b9f2a7d178af7342034b859 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -202,6 +202,41 @@ public class ArmorStand extends LivingEntity {
         this.noTickEquipmentDirty = true; // Paper - Allow equipment to be updated even when tick disabled
     }
 
+    // Purpur start
+    public List<List<ItemStack>> cloneEquipment() {
+        List<List<ItemStack>> list = new java.util.ArrayList<>();
+        List<ItemStack> handItems = new java.util.ArrayList<>();
+        for (ItemStack item : this.handItems) {
+            handItems.add(item.copy());
+        }
+        list.add(handItems);
+        List<ItemStack> armorItems = new java.util.ArrayList<>();
+        for (ItemStack item : this.armorItems) {
+            armorItems.add(item.copy());
+        }
+        list.add(armorItems);
+        return list;
+    }
+
+    public void restoreEquipment(List<List<ItemStack>> list) {
+        this.handItems.clear();
+        List<ItemStack> handItems = list.get(0);
+        for (int i = 0; i < handItems.size(); i++) {
+            this.handItems.set(i, handItems.get(1));
+        }
+        this.armorItems.clear();
+        List<ItemStack> armorItems = list.get(1);
+        for (int i = 0; i < armorItems.size(); i++) {
+            this.armorItems.set(i, armorItems.get(1));
+        }
+    }
+
+    public void clearEquipment() {
+        this.handItems.clear();
+        this.armorItems.clear();
+    }
+    // Purpur end
+
     @Override
     public boolean canTakeItem(ItemStack stack) {
         net.minecraft.world.entity.EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(stack);
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 94e76e295dbd0f3bac4b30a3e7338cd56a971207..445ebe4a7f51633923d8f4a9b13009ed4f2eb50c 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1949,6 +1949,52 @@ public abstract class Player extends LivingEntity {
 
     }
 
+    // Purpur start
+    public List<List<ItemStack>> cloneEquipment() {
+        List<List<ItemStack>> list = new java.util.ArrayList<>();
+        List<ItemStack> invItems = new java.util.ArrayList<>();
+        for (ItemStack item : this.inventory.items) {
+            invItems.add(item.copy());
+        }
+        list.add(invItems);
+        List<ItemStack> armorItems = new java.util.ArrayList<>();
+        for (ItemStack item : this.inventory.armor) {
+            armorItems.add(item.copy());
+        }
+        list.add(armorItems);
+        List<ItemStack> offhandItems = new java.util.ArrayList<>();
+        for (ItemStack item : this.inventory.offhand) {
+            offhandItems.add(item.copy());
+        }
+        list.add(offhandItems);
+        return list;
+    }
+
+    public void restoreEquipment(List<List<ItemStack>> list) {
+        this.inventory.items.clear();
+        List<ItemStack> invItems = list.get(0);
+        for (int i = 0; i < invItems.size(); i++) {
+            this.inventory.items.set(i, invItems.get(1));
+        }
+        this.inventory.armor.clear();
+        List<ItemStack> armorItems = list.get(1);
+        for (int i = 0; i < armorItems.size(); i++) {
+            this.inventory.armor.set(i, armorItems.get(1));
+        }
+        this.inventory.offhand.clear();
+        List<ItemStack> offhandItems = list.get(2);
+        for (int i = 0; i < offhandItems.size(); i++) {
+            this.inventory.offhand.set(i, offhandItems.get(1));
+        }
+    }
+
+    public void clearEquipment() {
+        this.inventory.items.clear();
+        this.inventory.armor.clear();
+        this.inventory.offhand.clear();
+    }
+    // Purpur end
+
     public boolean addItem(ItemStack stack) {
         this.equipEventAndSound(stack);
         return this.inventory.add(stack);
